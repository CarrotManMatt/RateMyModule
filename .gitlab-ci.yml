stages:
    - check
    - test
    - build

mypy-test:
    image: carrotmanmatt/poetry:3.12
    stage: test
    rules:
        - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
        - if: $CI_COMMIT_TAG
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

    allow_failure: true

    tags:
        - python

    variables:
        PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip

    cache:
        paths:
            - .venv
            - .mypy_cache
            - ${PIP_CACHE_DIR}

    before_script:
        - poetry install --no-root --with dev --no-interaction

    script:
        poetry run mypy .

ruff-test:
    image: carrotmanmatt/poetry:3.12
    stage: test
    rules:
        - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
        - if: $CI_COMMIT_TAG
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

    allow_failure: true

    tags:
        - python

    variables:
        PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip

    cache:
        paths:
            - .venv
            - .ruff_cache
            - ${PIP_CACHE_DIR}

    before_script:
        - poetry install --no-root --with dev --no-interaction

    script:
        poetry run ruff check . --no-fix --extend-select TD002,TD003

djlint-test:
    image: carrotmanmatt/poetry:3.12
    stage: test
    rules:
        - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
        - if: $CI_COMMIT_TAG
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

    allow_failure: true

    tags:
        - python

    variables:
        PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip

    cache:
        paths:
            - .venv
            - ${PIP_CACHE_DIR}

    before_script:
        - poetry install --no-root --with dev --no-interaction

    script:
        poetry run djlint . --lint

asciidoctor-test:
    image: python:3
    stage: check
    rules:
        - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
        - if: $CI_COMMIT_TAG
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

    tags:
        - python

    before_script:
        - apt-get update -y
        - apt-get install -y --no-install-recommends asciidoctor

    script:
        - asciidoctor -v --failure-level=WARNING -w  -o /dev/null README.adoc dev_docs/*.adoc

pre-commit-test:
    image: carrotmanmatt/poetry:3.12
    stage: check
    rules:
        - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
        - if: $CI_COMMIT_TAG
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

    tags:
        - python

    variables:
        PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
        PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip

    cache:
        paths:
            - .venv
            - ${PRE_COMMIT_HOME}
            - ${PIP_CACHE_DIR}

    before_script:
        - apt-get update -y
        - apt-get install -y --no-install-recommends git
        - poetry install --no-root --with dev --no-interaction

    script:
        poetry run pre-commit run --all-files

check-updated-tag:
    image: python:3
    stage: check
    rules:
        - if: $CI_COMMIT_TAG

    tags:
        - python

    variables:
        PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip

    cache:
        paths:
            - ${PIP_CACHE_DIR}

    before_script:
        - apt-get update -y
        - pip install --upgrade pip
        - echo "installing yq"
        - pip install yq==3.2.3
        - apt-get install -y --no-install-recommends jq

    script:
        - echo "ensuring version matches tag:$CI_COMMIT_TAG"
        - tomlq --compact-output --raw-output '.tool.poetry.version' pyproject.toml | grep -q $CI_COMMIT_TAG

build-latest-docker-image:
    stage: build
    tags:
        - docker

    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

    before_script:
        - echo "logging in to registry:$CI_REGISTRY as $CI_REGISTRY_USER"
        - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
        - echo "pulling most recent latest image for caching"
        - docker pull $CI_REGISTRY_IMAGE:latest || true

    script:
        - echo "building docker image latest version:$CI_COMMIT_SHA"
        - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
        - echo "pushing built images to GitLab repository"
        - docker push $CI_REGISTRY_IMAGE:latest
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

build-stable-docker-image:
    stage: build
    tags:
        - docker

    rules:
        - if: $CI_COMMIT_TAG

    when: manual

    before_script:
        - echo "logging in to registry:$CI_REGISTRY as $CI_REGISTRY_USER"
        - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
        - echo "pulling most recent stable image for caching"
        - docker pull $CI_REGISTRY_IMAGE:stable || true

    script:
        - echo "building docker image stable version:$CI_COMMIT_TAG"
        - docker build --cache-from $CI_REGISTRY_IMAGE:stable --tag $CI_REGISTRY_IMAGE:stable --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .
        - echo "pushing built images to GitLab repository"
        - docker push $CI_REGISTRY_IMAGE:stable
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
