# Generated by Django 4.2.10 on 2024-02-10 03:34

from django.db import migrations, models
import ratemymodule.models.managers
import ratemymodule.models.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Date & Time Created')),
                ('email', models.EmailField(error_messages={'max_length': 'The Email Address must be at most 255 digits.', 'unique': 'A user with that Email Address already exists.'}, max_length=255, unique=True, validators=[ratemymodule.models.validators.HTML5EmailValidator(), ratemymodule.models.validators.FreeEmailValidator(), ratemymodule.models.validators.ConfusableEmailValidator(), ratemymodule.models.validators.PreexistingEmailTLDValidator(), ratemymodule.models.validators.ExampleEmailValidator()], verbose_name='Email Address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into the admin site.', verbose_name='Is Admin?')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Is Active?')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
            },
            managers=[
                ('objects', ratemymodule.models.managers.UserManager()),
            ],
        ),
    ]
