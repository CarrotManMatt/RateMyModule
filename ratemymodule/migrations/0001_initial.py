# Generated by Django 4.2.10 on 2024-02-25 12:36

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import ratemymodule.models.managers
import ratemymodule.models.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Date & Time Created')),
                ('password', models.CharField(error_messages={'blank': 'Password is a required field.', 'null': 'Password is a required field.'}, max_length=128, verbose_name='Password')),
                ('email', models.EmailField(error_messages={'max_length': 'The Email Address must be at most 255 digits.', 'unique': 'A user with that Email Address already exists.'}, max_length=255, unique=True, validators=[ratemymodule.models.validators.HTML5EmailValidator(), ratemymodule.models.validators.FreeEmailValidator(), ratemymodule.models.validators.ConfusableEmailValidator(), ratemymodule.models.validators.PreexistingEmailTLDValidator(), ratemymodule.models.validators.ExampleEmailValidator()], verbose_name='Email Address')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='Is Superuser?')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into the admin site.', verbose_name='Is Staff?')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Is Active?')),
            ],
            options={
                'verbose_name': 'User',
            },
            managers=[
                ('objects', ratemymodule.models.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Date & Time Created')),
                ('name', models.CharField(max_length=60, validators=[django.core.validators.MinLengthValidator(3), ratemymodule.models.validators.UnicodePropertiesRegexValidator("\\A[\\p{L}!?¿¡' &()-]+\\Z")], verbose_name='Name')),
                ('student_type', models.CharField(max_length=60, validators=[django.core.validators.MinLengthValidator(3), ratemymodule.models.validators.UnicodePropertiesRegexValidator("\\A[\\p{L}!?¿¡' &()-]+\\Z")], verbose_name='Student Type')),
            ],
            options={
                'verbose_name': 'Course',
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Date & Time Created')),
                ('name', models.CharField(max_length=60, validators=[django.core.validators.MinLengthValidator(3), ratemymodule.models.validators.UnicodePropertiesRegexValidator("\\A[\\p{L}!?¿¡' &()-]+\\Z")], verbose_name='Name')),
                ('code', models.CharField(help_text='The unique reference code of this module within its university', max_length=60, unique=True, validators=[django.core.validators.MinLengthValidator(2), ratemymodule.models.validators.UnicodePropertiesRegexValidator("\\A[\\p{L}0-9!?¿¡' &()-]+\\Z")], verbose_name='Reference Code')),
                ('year_started', models.DateField(help_text='Date format DD/MM/YYYY', validators=[django.core.validators.MinValueValidator(datetime.date(1096, 1, 1)), django.core.validators.MaxValueValidator(datetime.date(3000, 1, 1))], verbose_name='Year Started')),
            ],
            options={
                'verbose_name': 'Module',
            },
        ),
        migrations.CreateModel(
            name='OtherTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Date & Time Created')),
                ('name', models.CharField(max_length=60, unique=True, validators=[django.core.validators.MinLengthValidator(2), ratemymodule.models.validators.UnicodePropertiesRegexValidator("\\A[\\p{L}!?¿¡' &()-]+\\Z")], verbose_name='Tag Name')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is Verified?')),
            ],
            options={
                'verbose_name': 'Other Tag',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Date & Time Created')),
                ('overall_rating', models.IntegerField(choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], verbose_name='Overall Rating')),
                ('difficulty_rating', models.IntegerField(blank=True, choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], null=True, verbose_name='Difficulty Rating')),
                ('assessment_rating', models.IntegerField(blank=True, choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], null=True, verbose_name='Assessment Rating')),
                ('teaching_rating', models.IntegerField(blank=True, choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], null=True, verbose_name='Teaching Rating')),
                ('content', models.TextField(blank=True, validators=[django.core.validators.RegexValidator('\\A\\Z|\\A.{3,}\\Z')], verbose_name='Content')),
                ('academic_year_start', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1096), django.core.validators.MaxValueValidator(3000)], verbose_name='Academic Year Start')),
                ('hidden', models.BooleanField(default=False, verbose_name='Is Hidden?')),
            ],
            options={
                'verbose_name': 'Post',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Date & Time Created')),
                ('reason', models.CharField(choices=[('HAT', 'Hate Speech or Language'), ('IDE', 'Identifying Information'), ('ANS', 'Assignment Answers'), ('SPM', 'SPAM'), ('BUL', 'Bullying or Harassment'), ('FLS', 'False Information'), ('SEX', 'Sexual Content')], max_length=3, verbose_name='Reason')),
                ('is_solved', models.BooleanField(default=False, verbose_name='Is_Solved')),
            ],
            options={
                'verbose_name': 'Report',
            },
        ),
        migrations.CreateModel(
            name='ToolTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Date & Time Created')),
                ('name', models.CharField(max_length=60, unique=True, validators=[django.core.validators.MinLengthValidator(2), ratemymodule.models.validators.UnicodePropertiesRegexValidator("\\A[\\p{L}!?¿¡' &()-]+\\Z")], verbose_name='Tag Name')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is Verified?')),
            ],
            options={
                'verbose_name': 'Tool Tag',
            },
        ),
        migrations.CreateModel(
            name='TopicTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Date & Time Created')),
                ('name', models.CharField(max_length=60, unique=True, validators=[django.core.validators.MinLengthValidator(2), ratemymodule.models.validators.UnicodePropertiesRegexValidator("\\A[\\p{L}!?¿¡' &()-]+\\Z")], verbose_name='Tag Name')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is Verified?')),
            ],
            options={
                'verbose_name': 'Topic Tag',
            },
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time_created', models.DateTimeField(auto_now_add=True, verbose_name='Date & Time Created')),
                ('name', models.CharField(max_length=60, unique=True, validators=[django.core.validators.MinLengthValidator(2), ratemymodule.models.validators.UnicodePropertiesRegexValidator("\\A[\\p{L}!?¿¡' &()-]+\\Z")], verbose_name='Name')),
                ('short_name', models.CharField(max_length=5, validators=[django.core.validators.MinLengthValidator(2), ratemymodule.models.validators.UnicodePropertiesRegexValidator("\\A[\\p{L}!?¿¡'-]+\\Z")], verbose_name='Short Name')),
                ('email_domain', models.CharField(max_length=253, unique=True, validators=[django.core.validators.MinLengthValidator(4), django.core.validators.RegexValidator('\\A((?!-))((xn--)?[a-z0-9][a-z0-9-_]{0,61}[a-z0-9]{0,1}\\.)+(xn--)?([a-z0-9\\-]{1,61}|[a-z0-9-]{1,30}\\.[a-z]{2,})\\Z')], verbose_name='Email Domain')),
                ('founding_date', models.DateField(help_text='Date format DD/MM/YYYY', validators=[django.core.validators.MinValueValidator(datetime.date(1096, 1, 1)), django.core.validators.MaxValueValidator(datetime.date(3000, 1, 1))], verbose_name='Date Founded')),
            ],
            options={
                'verbose_name': 'University',
                'verbose_name_plural': 'Universities',
            },
        ),
        migrations.AddConstraint(
            model_name='university',
            constraint=models.CheckConstraint(check=models.Q(('email_domain__regex', '\\A((?!-))((xn--)?[a-z0-9][a-z0-9-_]{0,61}[a-z0-9]{0,1}\\.)+(xn--)?([a-z0-9\\-]{1,61}|[a-z0-9-]{1,30}\\.[a-z]{2,})\\Z')), name='ensure_email_domain_adheres_to_regex'),
        ),
        migrations.AddField(
            model_name='report',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='report_set', to='ratemymodule.post', verbose_name='Post'),
        ),
        migrations.AddField(
            model_name='report',
            name='reporter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='made_report_set', to=settings.AUTH_USER_MODEL, verbose_name='Reporter'),
        ),
        migrations.AddField(
            model_name='post',
            name='module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='post_set', to='ratemymodule.module', verbose_name='Module'),
        ),
        migrations.AddField(
            model_name='post',
            name='other_tag_set',
            field=models.ManyToManyField(blank=True, related_name='post_set', to='ratemymodule.othertag', verbose_name='Other Tags'),
        ),
        migrations.AddField(
            model_name='post',
            name='tool_tag_set',
            field=models.ManyToManyField(blank=True, related_name='post_set', to='ratemymodule.tooltag', verbose_name='Tool Tags'),
        ),
        migrations.AddField(
            model_name='post',
            name='topic_tag_set',
            field=models.ManyToManyField(blank=True, related_name='post_set', to='ratemymodule.topictag', verbose_name='Topic Tags'),
        ),
        migrations.AddField(
            model_name='post',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='made_post_set', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='module',
            name='course_set',
            field=models.ManyToManyField(help_text='The set of courses that can include this module', related_name='module_set', to='ratemymodule.course', verbose_name='Attached Courses'),
        ),
        migrations.AddField(
            model_name='course',
            name='university',
            field=models.ForeignKey(help_text='The university that this course is taught at', on_delete=django.db.models.deletion.PROTECT, related_name='course_set', to='ratemymodule.university', verbose_name='University'),
        ),
        migrations.AddField(
            model_name='user',
            name='disliked_post_set',
            field=models.ManyToManyField(blank=True, help_text='The set of posts this user has disliked.', related_name='disliked_user_set', to='ratemymodule.post', verbose_name='Disliked Posts'),
        ),
        migrations.AddField(
            model_name='user',
            name='enrolled_course_set',
            field=models.ManyToManyField(blank=True, help_text='The set of courses this user has enrolled in.', related_name='enrolled_user_set', to='ratemymodule.course', verbose_name='Enrolled Courses'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='liked_post_set',
            field=models.ManyToManyField(blank=True, help_text='The set of posts this user has liked.', related_name='liked_user_set', to='ratemymodule.post', verbose_name='Liked Posts'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='report',
            constraint=models.CheckConstraint(check=models.Q(('reason__in', ['HAT', 'IDE', 'ANS', 'SPM', 'BUL', 'FLS', 'SEX'])), name='ensure_reason_valid_choice'),
        ),
        migrations.AddConstraint(
            model_name='post',
            constraint=models.UniqueConstraint(fields=('user', 'module'), name='unique_post_creator_with_module'),
        ),
        migrations.AddConstraint(
            model_name='post',
            constraint=models.CheckConstraint(check=models.Q(('overall_rating__in', [0, 1, 2, 3, 4, 5])), name='ensure_overall_rating_valid_choice'),
        ),
        migrations.AddConstraint(
            model_name='post',
            constraint=models.CheckConstraint(check=models.Q(('difficulty_rating__in', [0, 1, 2, 3, 4, 5])), name='ensure_difficulty_rating_valid_choice'),
        ),
        migrations.AddConstraint(
            model_name='post',
            constraint=models.CheckConstraint(check=models.Q(('assessment_rating__in', [0, 1, 2, 3, 4, 5])), name='ensure_assessment_rating_valid_choice'),
        ),
        migrations.AddConstraint(
            model_name='post',
            constraint=models.CheckConstraint(check=models.Q(('teaching_rating__in', [0, 1, 2, 3, 4, 5])), name='ensure_teaching_rating_valid_choice'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.UniqueConstraint(fields=('name', 'university'), name='unique_university_course_name'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(('is_staff', False), ('is_superuser', True), _negated=True), name='ensure_superusers_are_staff'),
        ),
    ]
